Metadata-Version: 2.2
Name: pathmanipulation
Version: 0.0.1
Summary: Secure Coding Example to mitigate the issues regarding the file upload flaws leading to Path Manipulation issues.
Home-page: https://github.com/sahildari/secure-coding-examples
Author: Sahil Dari
Author-email: sahil9dari@gmail.com
License: GPL
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: flask>3.0.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Path Manipulation 
This python project is to help to mitigate the path manipulation issues. You can use the logic in the pathmanipulation.py in you [Flask]() or [Django]() projects or any other Python projects.

## Code Structure

[app.py](./pythonapp/pathmanipulation/src/app.py) contains the Flask Code to handle the file upload logic with maximum file size.

[pathmanipulation.py](./pythonapp/pathmanipulation/src/pathmanipulation.py) contains logic for Filename, File extension, Double extension check and null byte checks.

[template](./pythonapp/pathmanipulation/src/templates) directory contains the index.html as frontend for the file upload with file type check on the client side.

You can try to play around this by following the Installation steps, check the Usage to run the Flask app

## Installation

1. Clone the repository:
```sh
git clone https://github.com/sahildari/secure-coding-examples
cd 'Path Manipulation/python'
```
2. Install the package:   
```sh
pip install .
```
## Usage
1. Run the Flask app
```sh
python run.py
```
2. Open in Browser:
```
http://127.0.0.1:5000
```
